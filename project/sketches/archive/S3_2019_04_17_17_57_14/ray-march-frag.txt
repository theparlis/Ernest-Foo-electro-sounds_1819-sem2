
/*
 * source from Ray Marching template 
 * http://raymarching.com/WebGL/WebGL_RaymarchingTemplate.htm
 *
 */ 
#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 resolution;
uniform vec4 mouse;
uniform float vol;

#define PI 3.1415926535898 // That was from memory, so if things start flying off the screen...

const float eps = 0.005; 

const int maxIterations = 128;
const float stepScale = 0.01;
const float stopThreshold = 0.05; // I'm not quite sure why, but thresholds in the order of a pixel seem to work better for me... most times.

float sphere(in vec3 p, in vec3 centerPos, float radius) {
	return length(p-centerPos) - radius;
}

float sinusoidBumps(in vec3 p){
    return vol*tan(p.x*16.+time*0.57)*tan(p.y*16.+time*2.17)*tan(p.z*16.-time*1.31) + 0.5*sin(p.x*32.+time*0.07)*cos(p.y*32.+time*2.11)*sin(p.z*32.-time*1.23);
}
    
float scene(in vec3 p) {
	return sphere(p, vec3(0., 0. , 2.), 1.) + 0.015*sinusoidBumps(p);
}

vec3 getNormal(in vec3 p) {	
	
	// The tetrahedral version, which does involve fewer calculations, but doesn't seem as accurate on some surfaces... I could be wrong,
	// but that's the impression I get.
    vec2 e = vec2(-0.01*eps,0.99*eps);   
	return normalize(e.yxx*scene(p+e.yxx)+e.xxy*scene(p+e.xxy)+e.xyx*scene(p+e.xyx)+e.yyy*scene(p+e.yyy)); 
	
}

float rayMarching( vec3 origin, vec3 dir, float start, float end ) {
	
	float sceneDist = 1e4;
	float rayDepth = start; // Ray depth. "start" is usually zero, but for various reasons, you may wish to start the ray further away from the origin.
	for ( int i = 0; i < maxIterations; i++ ) {
		
		sceneDist = scene( origin + dir * rayDepth ); // Distance from the point along the ray to the nearest surface point in the scene.
        
		if (( sceneDist < stopThreshold ) || (rayDepth >= end)) {
			break; 
		}
		rayDepth += sceneDist * stepScale;

	}
	
	if ( sceneDist >= stopThreshold ) rayDepth = end;
	else rayDepth += sceneDist;
	
	return rayDepth;
}


void main(void) {    
  vec2 aspect = vec2(resolution.x/resolution.y, 1.0);
	vec2 screenCoords = (2.0*gl_FragCoord.xy/resolution.xy - 1.0)*aspect;
	vec3 lookAt = vec3(0.,0.,0.);  // This is the point you look towards, or at.
	vec3 camPos = vec3(0., 0., -1.); // This is the point you look from, or camera you look at the scene through. Whichever way you wish to look at it.
	
	  
    vec3 forward = normalize(lookAt-camPos); // Forward vector.
    vec3 right = normalize(vec3(forward.z, 0., -forward.x )); // Right vector... or is it left? Either way, so long as the correct-facing up-vector is produced.
    vec3 up = normalize(cross(forward,right)); // Cross product the two vectors above to get the up vector.
     
    float FOV = 0.5;
    
    vec3 ro = camPos; 
    vec3 rd = normalize(forward + FOV*screenCoords.x*right + FOV*screenCoords.y*up);
  	
    

    vec3 bgcolor = vec3(1.,0.97,0.92)*0.15;
    float bgshade = (1.0-length(vec2(screenCoords.x/aspect.x, screenCoords.y+0.5) )*0.8);
	  bgcolor *= bgshade; //Shade the background a little.

	
	const float clipNear = 0.0;
	const float clipFar = 4.0;
	float dist = rayMarching(ro, rd, clipNear, clipFar ); // See the function itself for an explanation.
	if ( dist >= clipFar ) {
	    gl_FragColor = vec4(bgcolor, 1.0);
	    return;
	}
	
	
	vec3 sp = ro + rd*dist;
	
	
	vec3 surfNormal = getNormal(sp);
	
	vec3 lp = vec3(1.5*sin(time*0.5), 0.75+0.25 * sin(time * 0.5), -1.0);
	vec3 ld = lp-sp;
	vec3 lcolor = vec3(0.0,0.97,0.92);


	float len = length( ld ); // Distance from the light to the surface point.
	ld /= len; // Normalizing the light-to-surface, aka light-direction, vector.
	float lightAtten = min( 1.0 / ( 0.25*len*len ), 1.0 ); // Keeps things between 0 and 1.
	
	vec3 ref = reflect(-ld, surfNormal); 
    
    vec3 sceneColor = vec3(0.9);
	
	vec3 objColor = vec3(0.0, 1.0, 0.9);
  
	float bumps =  sinusoidBumps(sp);
  objColor = clamp(objColor*0.8-vec3(0.4, 0.2, 0.1) * bumps, 0.0, 1.0);
	
	float ambient = .9; //The object's ambient property. You can also have a global and light ambient property, but we'll try to keep things simple.
	float specularPower = 16.0; // The power of the specularity. Higher numbers can give the object a harder, shinier look.
	float diffuse = max( 0.0, dot(surfNormal, ld) ); //The object's diffuse value, which depends on the angle that the light hits the object.
	float specular = max( 0.0, dot( ref, normalize(camPos-sp)) ); 
	specular = pow(specular, specularPower); // Ramping up the specular value to the specular power for a bit of shininess.
		
	sceneColor += (objColor*(diffuse*0.8+ambient)+specular*0.15) * lcolor * lightAtten;


    gl_FragColor = vec4(clamp(sceneColor, 0.2, 1.0), 1.0);
	
}

